<?php
<<<<<<< HEAD
=======

>>>>>>> 0a0964d0920bf108a84785271142e4ab8cd51e0f
namespace App\Controller;

use App\Entity\User;
use App\Form\RegisterFormType;
use Doctrine\ORM\EntityManagerInterface;
use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\Routing\Annotation\Route;
use Symfony\Component\PasswordHasher\Hasher\UserPasswordHasherInterface;
<<<<<<< HEAD
use Symfony\Component\Form\FormError;
=======
use Symfony\Component\HttpFoundation\File\Exception\FileException;
>>>>>>> 0a0964d0920bf108a84785271142e4ab8cd51e0f

class RegisterController extends AbstractController
{
    #[Route('/register', name: 'register')]
<<<<<<< HEAD
    public function register(
        Request $request,
        UserPasswordHasherInterface $passwordHasher,
        EntityManagerInterface $entityManager
    ): Response {
=======
    public function register(Request $request, UserPasswordHasherInterface $passwordHasher, EntityManagerInterface $entityManager): Response
    {
>>>>>>> 0a0964d0920bf108a84785271142e4ab8cd51e0f
        $user = new User();
        $form = $this->createForm(RegisterFormType::class, $user);
        $form->handleRequest($request);

        if ($form->isSubmitted() && $form->isValid()) {
<<<<<<< HEAD
            // Additional CIN validation
            $cin = $user->getCin();
            if (!preg_match('/^[0-9]{8}$/', $cin)) {
                $form->get('cin')->addError(new FormError('CIN must be exactly 8 digits'));
                return $this->render('register.html.twig', [
                    'form' => $form->createView(),
                ]);
            }

            // Check for existing username
            $existingUser = $entityManager->getRepository(User::class)->findOneBy([
                'username' => $user->getUsername()
            ]);
            if ($existingUser) {
                $form->get('username')->addError(new FormError('This username is already taken.'));
            }

            // Check for existing email
            $existingEmail = $entityManager->getRepository(User::class)->findOneBy([
                'email' => $user->getEmail()
            ]);
            if ($existingEmail) {
                $form->get('email')->addError(new FormError('This email is already registered.'));
            }

            // Check for existing CIN
            $existingCin = $entityManager->getRepository(User::class)->findOneBy([
                'cin' => $user->getCin()
            ]);
            if ($existingCin) {
                $form->get('cin')->addError(new FormError('This CIN is already registered.'));
            }

            // If any validation errors, stop registration
            if (!$form->isValid()) {
                return $this->render('register.html.twig', [
                    'form' => $form->createView(),
                ]);
            }

            // Hash password
=======
>>>>>>> 0a0964d0920bf108a84785271142e4ab8cd51e0f
            $user->setPassword(
                $passwordHasher->hashPassword(
                    $user,
                    $form->get('password')->getData()
                )
            );

<<<<<<< HEAD
            // Set roles
            $selectedRole = $form->get('role')->getData();
            $user->setRoles([$selectedRole]);

            // Persist and flush
            $entityManager->persist($user);
            $entityManager->flush();

            // Redirect to login
=======
            $selectedRole = $form->get('role')->getData();
            $user->setRoles([$selectedRole, 'ROLE_USER']);

            $file = $form->get('profilePictureFile')->getData();
            if ($file) {
                $newFilename = uniqid() . '.' . $file->guessExtension();
                try {
                    $file->move($this->getParameter('profile_pictures_directory'), $newFilename);
                    $user->setProfilePicture($newFilename);
                } catch (FileException $e) {
                    // Handle file upload error
                }
            }

            $entityManager->persist($user);
            $entityManager->flush();

>>>>>>> 0a0964d0920bf108a84785271142e4ab8cd51e0f
            return $this->redirectToRoute('app_login');
        }

        return $this->render('register.html.twig', [
            'form' => $form->createView(),
        ]);
    }
<<<<<<< HEAD
}
=======
}
>>>>>>> 0a0964d0920bf108a84785271142e4ab8cd51e0f
